-- =======================================================================================
-- Modified by Tronex
-- 2018/8/3 - recipes won't respawn in loots upon reading them before
-- 2018/8/11 - added economy factors for looted corpses
-- 2018/8/11 - added economy factors for looted weapon condition
-- 2018/9/5 - Optimized script: removed actor_on_update, death manager will update outfits condition instead
-- 2018/10/2 - Fixed messy codes
-- 2018/10/29 - Random power for devices
-- 2019/5/29 - Remade functions for global item creation
-- =======================================================================================

-------------------------------
-- PREPARE
-------------------------------
local enable_trade_items = true

local item_by_community = {}
local item_count = {}
local always_keep_item = {}
local item_by_story_id = {}

local death_ini
local diff_multi, cnt_multi_1, cnt_multi_2 = 1, 1, 1
local shuffle_max = 2
local visuals = {}
local weapon_drop_condition, outfit_drop_condition = {}, {}
local o_cost_start, o_rank_multi, o_helm_multi

local item_prop_table = { cond_r = {30, 70}, cond_ct = "part", cond_cr = {0.5, 0.75, 1} }
local sfind = string.find
local keep_one = {}

function SetDiffModifications()
    local diff = game_difficulties.get_eco_factor("loots") or 1
    diff_multi = diff
    cnt_multi_1, cnt_multi_2 = 1, 1
end

function init_drop_settings()
    death_ini = itms_manager.ini_death
    SetDiffModifications()

    local community_list = {"stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky", "renegade", "greh", "isg", "greh_npc", "army_npc"}
    local ranks = {"", "_novice", "_trainee", "_experienced", "_professional", "_veteran", "_expert", "_master", "_legend"}
    local private = {"", "_private"}

    -- Collect community items
    for _, comm in pairs(community_list) do
        for _, priv in pairs(private) do
            for _, rank in pairs(ranks) do
                local sect_name = comm .. priv .. rank
                item_by_community[sect_name] = {}
                if death_ini:section_exist(sect_name) then
                    local n = death_ini:line_count(sect_name)
                    for i = 0, n - 1 do
                        local result, id, value = death_ini:r_line_ex(sect_name, i, "", "")
                        local temp = not (death_ini:line_exist("exclude_from_multi", id)) and diff_multi or 1
                        table.insert(item_by_community[sect_name], {sec = id, cha = value and tonumber(value) * temp or 0})
                    end
                    shuffle_table(item_by_community[sect_name])
                end
            end
        end
    end

    -- Collect items count
    for i = 0, death_ini:line_count("item_count") - 1 do
        local result, id, value = death_ini:r_line_ex("item_count", i, "", "")
        local p = str_explode(value, ",")
        if p then
            p[1] = tonumber(p[1]) or 0
            p[2] = tonumber(p[2]) or p[1]
            item_count[id] = {math.ceil(p[1] * cnt_multi_1), math.ceil(p[2] * cnt_multi_2)}
        end
    end

    -- Configure items to always keep
    for i = 0, death_ini:line_count("keep_items") - 1 do
        local result, id, value = death_ini:r_line_ex("keep_items", i, "", "")
        if value == "true" then
            always_keep_item[id] = true
        end
    end

    -- Configure items by story id
    for i = 0, death_ini:line_count("spawn_by_story_id") - 1 do
        local result, id, value = death_ini:r_line_ex("spawn_by_story_id", i, "", "")
        item_by_story_id[id] = value
    end

    -- Configure weapon drop conditions
    for i = 0, death_ini:line_count("weapon_drop_condition") - 1 do
        local result, id, value = death_ini:r_line_ex("weapon_drop_condition", i, "", "")
        local p = str_explode(value, ",")
        if p then
            p[1] = tonumber(p[1]) or 0.1
            p[2] = tonumber(p[2]) or p[1]
            weapon_drop_condition[id] = {math.ceil(p[1] * 100), math.ceil(p[2] * 100)}
        end
    end

    weapon_drop_condition["novice"] = weapon_drop_condition["novice"] or {5, 20}

    -- Configure outfit drop conditions
    for i = 0, death_ini:line_count("outfit_drop_condition") - 1 do
        local result, id, value = death_ini:r_line_ex("outfit_drop_condition", i, "", "")
        local p = str_explode(value, ",")
        if p then
            p[1] = tonumber(p[1]) or 0.1
            p[2] = tonumber(p[2]) or p[1]
            outfit_drop_condition[id] = {math.ceil(p[1] * 100), math.ceil(p[2] * 100)}
        end
    end

    -- Configure items to keep only one copy
    for i = 0, death_ini:line_count("keep_one") - 1 do
        local result, id, value = death_ini:r_line_ex("keep_one", i, "", "")
        keep_one[id] = 0
    end

    -- Progressive outfit drop settings
    o_cost_start = death_ini:r_float_ex("outfit_drop_settings", "cost_start") or 25000
    o_rank_multi = death_ini:r_float_ex("outfit_drop_settings", "rank_multiplier") or 20
    o_helm_multi = death_ini:r_float_ex("outfit_drop_settings", "helmet_cost_multi") or 3
end

-------------------------------
-- SPAWN ITEMS ON CORPSE
-------------------------------
items_by_npc = {}  -- table = trade, false = no trade, nil = not asked yet

function get_items_by_npc(npc_id)
    return items_by_npc[npc_id]
end

function set_items_by_npc(npc_id, value)
    items_by_npc[npc_id] = value
end

function clear_items_by_npc()
    local sim = alife()
    for npc_id, items in pairs(items_by_npc) do
        if items then
            for item_id in pairs(items) do
                local se = alife_object(item_id)
                if se and se.parent_id == npc_id then
                    alife_release_id(item_id)
                end
            end
        end
    end

    empty_table(items_by_npc)
    alife_storage_manager.get_state().items_by_npc = {}
end

function create_release_item(npc)
    local npc_id = npc:id()
    local npc_name = npc:name()

    -- Return if corpse has been looted already
    if se_load_var(npc_id, npc_name, "death_dropped") then
        return
    end
    se_save_var(npc_id, npc_name, "death_dropped", true)

    -- Iterate through NPC's inventory and check if there are items that should be released
    decide_items_to_keep(npc, npc_id, npc_name)

    -- Spawn items by story id
    local sid = item_by_story_id and get_object_story_id(npc_id)
    if sid and item_by_story_id[sid] then
        local p = xr_logic.pick_section_from_condlist(db.actor, npc, utils_data.parse_condlist(item_by_story_id[sid]))
        if p and p ~= "" and p ~= "nil" then
            create_item(npc, p, 1, 100 * cnt_multi_2)
        end
    end

    -- Return if NPC is defined by non-lootable
    local ini = npc:spawn_ini()
    if ini and ini:section_exist("dont_spawn_loot") then
        return
    end

    local st = db.storage[npc_id]
    if st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic, "dont_spawn_loot") then
        return
    end

    -- Spawn ammo based on NPC's weapon
    try_spawn_ammo(npc)

    -- Spawn outfit / helmet / patch based on NPC's visual
    spawn_cosmetics(npc, npc_id, character_community(npc), ranks.get_obj_rank_name(npc))

    -- Spawn community items
    if not enable_trade_items or (enable_trade_items and not items_by_npc[npc_id]) then  -- only if no items are already spawned for trading
        create_item_list(npc, character_community(npc), ranks.get_obj_rank_name(npc), false)
    end

    -- Spawn private items
    create_item_list(npc, character_community(npc), ranks.get_obj_rank_name(npc), true)
end

local flags = { upgrade = false, eatable = false }
local shuffle_cnt = {}

function create_item_list(npc, npc_comm, npc_rank, is_private, to_save)
    if not enable_trade_items and to_save then
        return
    end

    local spawn_section
    local sect_key = is_private and npc_comm .. "_private_" .. npc_rank or npc_comm .. "_" .. npc_rank
    if item_by_community[sect_key] then
        spawn_section = sect_key
    elseif item_by_community[npc_comm .. (is_private and "_private" or "")] then
        spawn_section = npc_comm .. (is_private and "_private" or "")
    end

    -- Spawn items
    flags.upgrade, flags.eatable = false, false
    if spawn_section then
        for _, item in ipairs(item_by_community[spawn_section]) do
            local sec = item.sec
            local v = item.cha
            if v > 0 and item_count[sec] and not IsItem("ammo", sec) and not IsItem("grenade_ammo", sec) then
                local number = math.random(item_count[sec][1], item_count[sec][2])
                create_item(npc, sec, number, v, to_save)
            end
        end

        -- shuffle
        shuffle_cnt[spawn_section] = (shuffle_cnt[spawn_section] or 0) + 1
        if shuffle_cnt[spawn_section] > shuffle_max then
            shuffle_table(item_by_community[spawn_section])
        end
    else
        printdbg("! death_manager | no item spawn list for npc with community (%s) rank (%s)", npc_comm, npc_rank)
    end
end

function create_item(npc, section, number, rnd, to_save)
    if IsItem("ammo", section) and number > 0 then
        alife_create_item(section, npc, {ammo = number})
    else
        for _ = 1, number do
            if (math.random() <= rnd) then
                local npc_id = npc:id()
                
                local skip = false
                local sec, section_cut = section, section:sub(1, #section - 3) or ""
                if npc_id ~= AC_ID and sfind(section, "letter") and (not IsItem("recipe", section)) and ui_pda_encyclopedia_tab.is_unlocked_note("encyclopedia__notes_" .. section) then
                    skip = true
                end
                
                if not skip then
                    -- Manage unique item drops
                    local found_upgrade = IsItem("upgrade", section)
                    if found_upgrade then
                        if flags.upgrade then
                            skip = true
                        end
                        flags.upgrade = true
                    end

                    local found_eatable = IsItem("eatable", section) or IsItem("eatable", section_cut)
                    if found_eatable and flags.eatable then
                        skip = true
                    end
                    flags.eatable = true

                    if not skip then
                        local se_itm = alife_create_item(section, npc, item_prop_table)
                        if not se_itm then
                            printe("!ERROR [%s] is not spawned by ItemProcessor", section)
                        else
                            if to_save then
                                items_by_npc[npc_id] = items_by_npc[npc_id] or {}
                                items_by_npc[npc_id][se_itm.id] = true
                            end
                        end
                    end
                end
            end
        end
    end
end

-------------------------------
-- ITEMS TO KEEP
-------------------------------
function decide_items_to_keep(npc, npc_id, npc_name)
    if se_load_var(npc_id, npc_name, "death_dropped") then return end
    for sec in pairs(keep_one) do keep_one[sec] = 0 end
    npc:iterate_inventory(keep_item, npc)
end

function keep_item(npc, item)
    if not item then return end

    local section = item:section()
    local item_id = item:id()
    
    if always_keep_item[section] then return end

    local se_item = alife_object(item_id)
    if not se_item then return end

    local ini = npc:spawn_ini()
    if ini and ini:section_exist("dont_keep_items") then
        alife_release(se_item)
        return
    end

    local npc_id = npc:id()
    local st = db.storage[npc_id]
    if st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic, "dont_keep_items") then
        alife_release(se_item)
        return
    end
    
    if axr_companions.is_assigned_item(npc_id, item_id) then return end
    if IsItem("anim", section) then alife_release(se_item); return end
    
    local cls = item:clsid()
    if IsWeapon(item, cls) and (not (cls == clsid.wpn_grenade_rgd5_s or cls == clsid.wpn_grenade_f1_s)) and not se_load_var(item_id, npc:name(), "strapped_item") then
        set_weapon_drop_condition(npc, item)
        return
    end

    if IsOutfit(nil, cls) or IsHeadgear(nil, cls) then
        local npc_comm = character_community(npc)
        local npc_rank = ranks.get_obj_rank_name(npc)
        local coef = get_comb_coeff(npc_rank, npc_comm)^0.44
        local condition = get_condition_by_rank(npc_rank, coef)
        itms_manager.process_item(section, item_id, {cond = condition})
        return
    end

    if (item:is_ammo() and item:ammo_get_count() > 5) or IsItem("grenade_ammo", section) then
        alife_release(se_item)
        return
    end

    if keep_one[section] then
        keep_one[section] = keep_one[section] + 1
        if keep_one[section] > 1 then
            alife_release(se_item)
        end
    end
end

-------------------------------
-- WEAPONS
-------------------------------
function try_spawn_ammo(npc)
    local function itr(npc, itm)
        if IsWeapon(nil, itm:clsid()) and not npc:marked_dropped(itm) then
            local ammo_class = parse_list(ini_sys, itm:section(), "ammo_class")

            -- randomly spawn only 1 ammo type per found weapon
            if #ammo_class > 0 then
                local sec = ammo_class[math.random(1, #ammo_class)]
                local number = math.random(item_count[sec] and item_count[sec][1] or 0, item_count[sec] and item_count[sec][2] or 0)
                if number > 0 and ini_sys:section_exist(sec) then
                    alife_create_item(sec, npc, {ammo = number})
                end
            end
            
            -- spawn grenade ammo if there is a launcher attached
            if ini_sys:r_float_ex(itm:section(), "grenade_launcher_status") > 0 then
                ammo_class = parse_list(ini_sys, itm:section(), "grenade_class")
                for _, sec in ipairs(ammo_class) do
                    local number = math.random(item_count[sec] and item_count[sec][1] or 0, item_count[sec] and item_count[sec][2] or 0)
                    if number > 0 and ini_sys:section_exist(sec) then
                        alife_create_item(sec, npc, {ammo = number})
                    end
                end
            end
        end
    end
    npc:iterate_inventory(itr, npc)
    CreateTimeEvent(npc:id(), "npc_ammo_aggregation", 0, item_weapon.ammo_aggregation_full, npc:id())
end

function set_weapon_drop_condition(npc, itm)
    local rank = ranks.get_obj_rank_name(npc)
    local condition = (npc:character_community() ~= "zombied") and math.random(weapon_drop_condition[rank][1], weapon_drop_condition[rank][2]) or math.random(weapon_drop_condition["novice"][1], weapon_drop_condition["novice"][2])

    condition = clamp(condition, 5, 100) / 100
    itm:set_condition(condition)

    -- avoid creating ammo on reload
    if se_load_var(npc:id(), npc:name(), "death_dropped") then return end

    if IsWeapon(nil, itm:clsid()) and not npc:marked_dropped(itm) then
        local ammo_class = parse_list(ini_sys, itm:section(), "ammo_class")
        
        -- randomly spawn only 1 ammo type per found weapon
        local sec = ammo_class[math.random(1, #ammo_class)]
        local number = math.random(item_count[sec] and item_count[sec][1] or 0, item_count[sec] and item_count[sec][2] or 0)
        if number > 0 and ini_sys:section_exist(sec) then
            alife_create_item(sec, npc, {ammo = number})
        end

        -- spawn grenade ammo if there is a launcher attached
        if ini_sys:r_float_ex(itm:section(), "grenade_launcher_status") > 0 then
            ammo_class = parse_list(ini_sys, itm:section(), "grenade_class")
            for _, sec in ipairs(ammo_class) do
                local number = math.random(item_count[sec] and item_count[sec][1] or 0, item_count[sec] and item_count[sec][2] or 0)
                if number > 0 and ini_sys:section_exist(sec) then
                    alife_create_item(sec, npc, {ammo = number})
                end
            end
        end
        
        -- Handle ammo in weapons
        local ammo = itm:get_ammo_in_magazine()
        if ammo > 10 and math.random(0, 100) > 15 then
            itm:set_ammo_elapsed(math.random(5, 10))
        end
    end
end

-------------------------------
-- OUTFITS - HELMETS - PATCHES
-------------------------------
function get_comb_coeff(rank, comm)
    local rank_coeffs_table = {novice = 0.3, trainee = 0.4, experienced = 0.5, professional = 0.6, veteran = 0.7, expert = 0.8, master = 0.9, legend = 1}
    local comm_coeffs_table = {zombied = 1, ecolog = 7, bandit = 10, freedom = 15, stalker = 17, clearsky = 20, dolg = 23, killer = 25, army = 27, monolith = 30}
    
    return (rank_coeffs_table[rank] or 0) * (comm_coeffs_table[comm] or 0) / (rank_coeffs_table.legend * comm_coeffs_table.monolith)
end

function get_outfit_by_npc_visual(visual, clean)
    local s_name = str_explode(visual, "\\")
    local v_name = clean and s_name[1] or s_name[3]
    return get_outfit_by_visual(v_name)
end

function get_outfit_by_visual(visual)
    local str = death_ini:r_string_ex("outfit_by_visual", visual)
    return str and str_explode(str, ",")
end

function get_condition_by_rank(rank, coef)
    local min_con = outfit_drop_condition[rank] and outfit_drop_condition[rank][1] or 10
    local max_con = outfit_drop_condition[rank] and outfit_drop_condition[rank][2] or 30
    return utils_data.mean_random(min_con, max_con, coef, 7) / 100
end

function validate_drop(section)
    local outfit_drop_mode = game_difficulties.get_eco_factor("outfit_drops") or 2
    
    if outfit_drop_mode == 2 then
        local cost = ini_sys:r_float_ex(section, "cost")
        if cost then
            if ini_sys:r_float_ex(section, "kind") == "o_helmet" then
                cost = cost * o_helm_multi
            end
            
            local rnk = alife():actor():rank()
            return ((rnk * o_rank_multi) + o_cost_start) >= cost
        end
    elseif outfit_drop_mode == 3 then
        return true
    end

    return false
end

function spawn_with_condition(npc, section, condition)
    local se_outfit = alife_create(section, npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), false)
    local data = utils_stpk.get_item_data(se_outfit)
    data.condition = condition
    
    utils_stpk.set_item_data(data, se_outfit)
    alife():register(se_outfit)

    return se_outfit and se_outfit.id
end
    
function spawn_cosmetics(npc, npc_id, npc_comm, npc_rank, visual, rand_condition)
    local coef = get_comb_coeff(npc_rank, npc_comm)^0.44
    local visual = visual or npc:get_visual_name()
    local tbl = get_outfit_by_npc_visual(visual)

    if ini_sys:section_exist(npc_comm .. "_patch") then
        alife_create_item(npc_comm .. "_patch", npc)
    end

    local outfit_section = tbl and tbl[1]
    local helmet_section = tbl and tbl[2]

    local outfit_id
    if outfit_section and ini_sys:section_exist(outfit_section) and validate_drop(outfit_section) then
        local condition = rand_condition and (math.random(75, 85) / 100) or get_condition_by_rank(npc_rank, coef)
        outfit_id = spawn_with_condition(npc, outfit_section, condition)
    end

    local helmet_id
    if helmet_section and ini_sys:section_exist(helmet_section) and validate_drop(helmet_section) then
        local condition = rand_condition and (math.random(75, 85) / 100) or get_condition_by_rank(npc_rank, coef)
        helmet_id = spawn_with_condition(npc, helmet_section, condition)
    end

    return outfit_id
end

-------------------------------
-- CALLBACKS
-------------------------------
local function save_state(m_data)
    if USE_MARSHAL then
        m_data.items_by_npc = items_by_npc
        printdbg("# SAVING: NPC items | number of saved npcs: %s", size_table(items_by_npc))
    end
end

local function load_state(m_data)
    if USE_MARSHAL then
        items_by_npc = m_data.items_by_npc or {}
        printdbg("# LOADING: NPC items | number of saved npcs: %s", size_table(items_by_npc))
    end
end

local function on_before_level_changing()
    printdbg("~ death_manager | released all temp trade items")
    clear_items_by_npc()
end

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_before_level_changing", on_before_level_changing)
end

-------------------------------
-- DEBUG
-------------------------------
function simulate_death_drops(num)

    if size_table(item_by_community) == 0 then
        init_drop_settings()
    end

    local print_tbl = {}
    
    local tbl_comm = {"stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky", "renegade", "greh", "isg", "greh_npc", "army_npc"}
    local tbl_rank = {"", "_novice", "_trainee", "_experienced", "_professional", "_veteran", "_expert", "_master", "_legend"}

    local function simulate_create_item(section, number, rnd, tbl)
        if IsItem("ammo", section) then
            if number > 0 then
                tbl[#tbl + 1] = {sec = section, num = number}
            end
        else
            for _ = 1, number do
                if (math.random() <= rnd) then
                    local skip = false

                    local found_upgrade = IsItem("upgrade", section)
                    if found_upgrade and flags.upgrade then
                        skip = true
                    elseif found_upgrade then
                        flags.upgrade = true
                    end

                    local found_eatable = IsItem("eatable", section) or IsItem("eatable", section_cut)
                    if found_eatable and flags.eatable then
                        skip = true
                    elseif found_eatable then
                        flags.eatable = true
                    end

                    if not skip then
                        local sec, uses = utils_item.get_defined_uses(section)
                        if sec and uses and ini_sys:section_exist(sec) then
                            section = uses and sec or section
                        end

                        if ini_sys:section_exist(section) then
                            if uses then
                                tbl[#tbl + 1] = {sec = section, uses = uses, num = 1}
                            else
                                if utils_item.is_degradable(nil, section) then
                                    if IsItem("part", section) then
                                        tbl[#tbl + 1] = {sec = section, con = random_choice(0.5, 0.75, 1), num = 1}
                                    else
                                        tbl[#tbl + 1] = {sec = section, con = math.random(30, 70), num = 1}
                                    end
                                else
                                    tbl[#tbl + 1] = {sec = section, num = 1}
                                end
                            end
                        else
                            printdbg("! death_manager | item couldn't be created because section doesn't exist [%s]", section)
                        end
                    end
                end
            end
        end
    end

    local function simulate_drop_list(section, tbl)
        flags.upgrade, flags.eatable = false, false
        if item_by_community[section] then
            for _, item in ipairs(item_by_community[section]) do
                local sec = item.sec
                local v = item.cha
                if v > 0 and item_count[sec] and not IsItem("ammo", sec) and not IsItem("grenade_ammo", sec) then
                    local number = math.random(item_count[sec][1], item_count[sec][2])
                    simulate_create_item(sec, number, v, tbl)
                end
            end

            -- shuffle
            shuffle_cnt[section] = (shuffle_cnt[section] or 0) + 1
            if shuffle_cnt[section] > shuffle_max then
                shuffle_table(item_by_community[section])
            end
        end
    end

    for i = 1, #tbl_comm do
        for j = 1, #tbl_rank do
            for k = 1, num do
                local str = tbl_comm[i] .. tbl_rank[j] .. "_" .. tostring(k)
                print_tbl[str] = {}
                simulate_drop_list(tbl_comm[i] .. tbl_rank[j], print_tbl[str])
                simulate_drop_list(tbl_comm[i] .. "_private" .. tbl_rank[j], print_tbl[str])
            end
        end
    end

    -- print
    printf("----------------------------------------------------------")
    for name, v in utils_data.pairsByKeys(print_tbl) do
        local str = "{" .. name .. "}:= "
        for _, info in ipairs(v) do
            local add = ""
            if info.uses then
                add = "[x" .. info.uses .. "]"
            elseif info.con then
                add = "[%" .. info.con .. "]"
            end
            str = str .. " , " .. info.sec .. " (" .. info.num .. ")" .. add
        end
        printf(str)
    end
    printf("----------------------------------------------------------")
end
