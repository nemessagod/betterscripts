-- =======================================================================================
-- Tronex
-- 2018/8/10
-- Economy and gameplay difficulty factors
-- =======================================================================================

local ini_diff = ini_file("plugins\\difficulty.ltx")

local eco_num = 1
local economy = {}
local factors_eco = {}

local game_num = 1
local gameplay = {}
local factors_game = {}

local vanilla_diff = {
    "gd_novice",
    "gd_stalker",
    "gd_veteran",
    "gd_master",
}

-- Helper function to handle setting default values
local function get_value(table, key, def)
    return table[key] or def
end

function setup_game_factors(diff)
    factors_game = {
        type = get_value(gameplay, "type", game_num),
        actor_immunities = get_value(gameplay, "actor_immunities", ini_diff:r_float_ex("gdiff_" .. diff, "actor_immunities") or 1),
        hit_power = get_value(gameplay, "hit_power", ini_diff:r_float_ex("gdiff_" .. diff, "hit_power") or 1),
        dispersion_base = get_value(gameplay, "dispersion_base", ini_diff:r_float_ex("gdiff_" .. diff, "dispersion_base") or 1),
        dispersion_factor = get_value(gameplay, "dispersion_factor", ini_diff:r_float_ex("gdiff_" .. diff, "dispersion_factor") or 1),
        power_loss_bias = get_value(gameplay, "power_loss_bias", ini_diff:r_float_ex("gdiff_" .. diff, "power_loss_bias") or 0.2),
        weight = get_value(gameplay, "weight", ini_diff:r_float_ex("gdiff_" .. diff, "max_weight") or 25),
        thirst = get_value(gameplay, "thirst", ini_diff:r_bool_ex("gdiff_" .. diff, "thirst")),
        sleep = get_value(gameplay, "sleep", ini_diff:r_bool_ex("gdiff_" .. diff, "sleep")),
        radiation_day = get_value(gameplay, "radiation_day", ini_diff:r_bool_ex("gdiff_" .. diff, "radiation_day")),
        notify_geiger = get_value(gameplay, "notify_geiger", ini_diff:r_bool_ex("gdiff_" .. diff, "notify_geiger")),
        notify_anomaly = get_value(gameplay, "notify_anomaly", ini_diff:r_bool_ex("gdiff_" .. diff, "notify_anomaly")),
    }
end

function setup_eco_factors(eco)
    factors_eco = {
        type = get_value(economy, "type", eco_num),
        goodwill = get_value(economy, "goodwill", ini_diff:r_float_ex("econ_" .. eco, "goodwill") or 1),
        rewards = get_value(economy, "rewards", ini_diff:r_float_ex("econ_" .. eco, "rewards") or 1),
        repair = get_value(economy, "repair", ini_diff:r_float_ex("econ_" .. eco, "repair") or 1),
        upgrade = get_value(economy, "upgrade", ini_diff:r_float_ex("econ_" .. eco, "upgrade") or 1),
        buy = get_value(economy, "buy", ini_diff:r_float_ex("econ_" .. eco, "buy") or 1),
        sell = get_value(economy, "sell", ini_diff:r_float_ex("econ_" .. eco, "sell") or 1),
        artefact = get_value(economy, "artefact", ini_diff:r_float_ex("econ_" .. eco, "artefact") or 1),
        loots = get_value(economy, "loots", ini_diff:r_float_ex("econ_" .. eco, "loots") or 1),
        money_loots = get_value(economy, "money_loots", ini_diff:r_float_ex("econ_" .. eco, "money_loots") or 1),
        stash_chance = get_value(economy, "stash_chance", ini_diff:r_float_ex("econ_" .. eco, "stash_chance") or 0.4),
        weapon_degradation = get_value(economy, "weapon_degradation", ini_diff:r_float_ex("econ_" .. eco, "weapon_degradation") or 1),
        battery_consumption = get_value(economy, "battery_consumption", ini_diff:r_float_ex("econ_" .. eco, "battery_consumption") or 1),
        random_items = get_value(economy, "random_items", ini_diff:r_float_ex("econ_" .. eco, "random_items") or 0.5),
        scope_chance = get_value(economy, "scope_chance", ini_diff:r_float_ex("econ_" .. eco, "scope_chance") or 0.15),
        arty_chance = get_value(economy, "arty_chance", ini_diff:r_float_ex("econ_" .. eco, "arty_chance") or 0.25),
        restock = get_value(economy, "restock", ini_diff:r_float_ex("econ_" .. eco, "restock") or 24),
        percentage_parts = get_value(economy, "percentage_parts", ini_diff:r_bool_ex("econ_" .. eco, "percentage_parts")),
        limited_bolts = get_value(economy, "limited_bolts", ini_diff:r_bool_ex("econ_" .. eco, "limited_bolts")),
        arty_degradation = get_value(economy, "arty_degradation", ini_diff:r_bool_ex("econ_" .. eco, "arty_degradation")),
        bkpk_degradation = get_value(economy, "bkpk_degradation", ini_diff:r_bool_ex("econ_" .. eco, "bkpk_degradation")),
        outfit_drops = get_value(economy, "outfit_drops", ini_diff:r_float_ex("econ_" .. eco, "outfit_drops") or 2),
    }
end

function set_game_factor(key, val)
    if gameplay[key] ~= val and not has_alife_info("diff_gameplay_flag_change") then
        give_info("diff_gameplay_flag_change")
        printf("~ Gameplay difficulty | player changed something!")
    end

    alife_storage_manager.get_state().diff_game[key] = val
    gameplay[key] = val
    setup_game_factors(game_num)

    local action_map = {
        actor_immunities = set_actor_immunities,
        hit_power = set_hit_power,
        dispersion_base = set_dispersion_base,
        dispersion_factor = set_dispersion_factor,
        power_loss_bias = set_actor_stamina,
        weight = set_actor_weight,
        thirst = actor_status_thirst.toggle_feature,
        sleep = actor_status_sleep and actor_status_sleep.toggle_feature,  -- Ensure actor_status_sleep is initialized before use
    }
    
    if action_map[key] then
        action_map[key](val)
    end
    printdbg("# Gameplay difficulty factor saved: [" .. key .. "] = " .. tostring(val))
end

function set_eco_factor(key, val)
    if economy[key] ~= val and not has_alife_info("diff_economy_flag_change") then
        give_info("diff_economy_flag_change")
        printf("~ Progression difficulty | player changed something!")
    end

    alife_storage_manager.get_state().diff_eco[key] = val
    economy[key] = val
    setup_eco_factors(eco_num)

    if key == "weapon_degradation" then
        set_weapon_degradation()
    elseif key == "arty_degradation" or key == "bkpk_degradation" then
        item_artefact.toggle_feature_arty_degradation(val)
    end
    printdbg("# Progression difficulty factor saved: [" .. key .. "] = " .. tostring(val))
end

function get_game_factor(key)
    return factors_game[key]
end

function get_eco_factor(key)
    return factors_eco[key]
end

--==================================================
function set_actor_immunities()
    local immunities = get_game_factor("actor_immunities") or 1
    local pick = vanilla_diff[immunities]
    exec_console_cmd("g_game_difficulty " .. pick)
    printdbg("g_game_difficulty " .. pick)
end

function set_hit_power()
    local hit_power = get_game_factor("hit_power") or 1
    exec_console_cmd("g_hit_pwr_modif " .. hit_power)
    printdbg("g_hit_pwr_modif " .. hit_power)
end

function set_dispersion_base()
    local dispersion_base = get_game_factor("dispersion_base") or 1
    exec_console_cmd("g_dispersion_base " .. dispersion_base)
    printdbg("g_dispersion_base " .. dispersion_base)
end

function set_dispersion_factor()
    local dispersion_factor = get_game_factor("dispersion_factor") or 1
    exec_console_cmd("g_dispersion_factor " .. dispersion_factor)
    printdbg("g_dispersion_factor " .. dispersion_factor)
end

function set_actor_stamina()
    local pwb = get_game_factor("power_loss_bias") or 0.2
    exec_console_cmd("power_loss_bias " .. tostring(pwb))
end

function set_actor_weight()
    local cw = get_game_factor("weight") or 20
    local mww = cw + (math.ceil(cw / 5) * 2)
    if cw ~= db.actor:get_actor_max_weight() then
        db.actor:set_actor_max_weight(cw)
        db.actor:set_actor_max_walk_weight(mww)
    end
end

function set_weapon_degradation()
    local val = get_eco_factor("weapon_degradation") or 1
    exec_console_cmd("wpn_degradation " .. tostring(val))
end

--=======================================< Callbacks >=======================================--
local function on_game_load()
    exec_console_cmd("ai_die_in_anomaly 0")

    -- Prepare progression difficulty factors
    economy = alife_storage_manager.get_state().diff_eco or {}
    if type(economy) ~= "table" then
        economy = {type = eco_num}
        alife_storage_manager.get_state().diff_eco = economy
    end
    eco_num = economy.type or eco_num
    setup_eco_factors(eco_num)

    -- Prepare gameplay difficulty factors
    gameplay = alife_storage_manager.get_state().diff_game or {}
    if type(gameplay) ~= "table" then
        gameplay = {type = game_num}
        alife_storage_manager.get_state().diff_game = gameplay
    end
    game_num = gameplay.type or game_num
    setup_game_factors(game_num)

    set_actor_immunities()
    set_hit_power()
    set_dispersion_base()
    set_dispersion_factor()
    set_actor_weight()
    set_actor_stamina()
    set_weapon_degradation()
    
    if actor_status_thirst then
        actor_status_thirst.toggle_feature(factors_game.thirst)
    end
    if actor_status_sleep then
        actor_status_sleep.toggle_feature(factors_game.sleep)
    end
    item_artefact.toggle_feature_arty_degradation(factors_eco.arty_degradation)
    item_artefact.toggle_feature_arty_degradation(factors_eco.bkpk_degradation)
end

function on_game_start()
    RegisterScriptCallback("on_game_load", on_game_load)
end
